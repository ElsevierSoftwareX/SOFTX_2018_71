% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hsu.R
\name{modify_graph_hsu}
\alias{modify_graph_hsu}
\title{Hsu et al. (2009) Algorithm}
\usage{
modify_graph_hsu(g, f, cores = 1L)
}
\arguments{
\item{g}{The digraph to be transformed, written as a data frame where each row represents a directed
arc. The columns must be named \code{from} and \code{to}, and can be of any data type. On each row
no cells can be \code{NULL} or \code{NA}.}

\item{f}{The set of forbidden paths, written as a data frame. Each row represents a path as a sequence of
nodes. Each row may be of different size, filling the empty cells with \code{NA}. All nodes involved
must be part of \code{g}, and no forbidden path can be of size 2. This is because the latter is
thought as an arc that should not exist in the first place.}

\item{cores}{This algorithm can be run using R's parallel processing functions. This variable represents
the number of processing cores you want to assign for the transformation. The default value is one single
core. It is suggested to not assign all of your available cores to the function.}
}
\value{
A new graph, generated following Hsu's backward construction, in which no path includes one of the
   forbidden subpaths. The graph is returned in a data frame format, where each row represents a directed
   arc, with or without additional attributes (if corresponds). However, regardless of the data type of the
   original graph, nodes on the new graph are of type
   character. The new nodes names are generated by incrementally concatenating the nodes on a forbidden
   path, but split by a pipe character (\code{|}).
}
\description{
It is an implementation of Hsu et al. algorithm to transform a digraph and a known set of
   forbidden paths, into a new graph that does not allow any forbidden path as part of its solutions.
}
\details{
This version of the algorithm produce smaller graphs, with less new nodes and arcs.
}
\examples{
# Obtain a graph and its forbidden subpaths
graph <- structure(list(from = c("s", "s", "s", "u", "u", "w", "w", "x", "x", "v", "v", "y", "y"),
                        to = c("u", "w", "x", "w", "v", "v", "y", "w", "y", "y", "t", "t", "u"),
                        .Names = c("from", "to"), class = "data.frame", row.names = c(NA, -13L))
fpaths <- structure(list(V1 = c("u", "u", "w", "x"), V2 = c("v", "w", "v", "w"), V3 = c("y", "y", "y", "v"),
                         V4 = c("u", "u", "", "y"), V5 = c("", "", "", "t")),
                   .Names = c("V1", "V2", "V3", "V4", "V5"), class = "data.frame", row.names = c(NA, -4L))

# Call the function and store the result
gStar <- modify_graph_hsu(graph, fpaths)


}
\seealso{
\url{https://doi.org/10.1007/978-3-642-03095-6_60}

Other Graph Transformation: \code{\link{modify_graph_vd}}
}
